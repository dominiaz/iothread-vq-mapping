--- QemuServer.pm	2025-07-20 07:55:23.325703026 +0200
+++ QemuServer.pm	2025-07-20 08:35:34.019202515 +0200
@@ -1196,39 +1196,104 @@
     return "usb-kbd,id=keyboard,bus=ehci.0,port=2";
 }
 
+# Helper to generate iothread/VQ mapping for block devices
+sub generate_iothread_vq_mapping {
+    my ($vmid, $drive) = @_;
+    my ($use_iothread_vq_mapping, $use_iothread, @vq_map);
+
+    if ($drive->{iothread_vq_mapping}) {
+        $use_iothread_vq_mapping = 1;
+        @vq_map = map { { iothread => "iothread-${vmid}-$_" } }
+                  0 .. $drive->{iothread_vq_mapping} - 1;
+    } elsif ($drive->{iothread}) {
+        $use_iothread = 1;
+    }
+
+    return ($use_iothread_vq_mapping, $use_iothread, \@vq_map);
+}
+
+# Main sub: JSON encoder for ordered key-value pairs and full drive device construction
+
 sub print_drivedevice_full {
     my ($storecfg, $conf, $vmid, $drive, $bridges, $arch, $machine_type) = @_;
 
-    my $device = '';
-    my $maxdev = 0;
-
     my $machine_version = extract_version($machine_type, kvm_user_version());
+    my $drive_id        = PVE::QemuServer::Drive::get_drive_id($drive);
+
+    # Compute PCI address for virtio
+    my $pciaddr = '';
+    if ($drive->{interface} eq 'virtio') {
+        $pciaddr = print_pci_addr($drive_id, $bridges, $arch, $machine_type);
+    }
+
+    # Generate iothread/VQ mapping flags and mapping array
+    my ($use_iothread_vq_mapping, $use_iothread, $vq_map_ref) =
+        generate_iothread_vq_mapping($vmid, $drive);
+
+    # Prepare JSON encoder
+    my $json = JSON->new->canonical(1);
+    my $device;
 
-    my $drive_id = PVE::QemuServer::Drive::get_drive_id($drive);
     if ($drive->{interface} eq 'virtio') {
-        my $pciaddr = print_pci_addr("$drive_id", $bridges, $arch);
         $device = 'virtio-blk-pci';
-        # for the switch to -blockdev, there is no blockdev for 'none'
         if (!min_version($machine_version, 10, 0) || $drive->{file} ne 'none') {
             $device .= ",drive=drive-$drive_id";
         }
-        $device .= ",id=${drive_id}${pciaddr}";
-        $device .= ",iothread=iothread-$drive_id" if $drive->{iothread};
+
+        if ($use_iothread_vq_mapping) {
+            # Build full JSON spec for QEMU
+            my ($bus, $addr) = ('', '');
+            if ($pciaddr =~ /^,bus=([^,]+),addr=(.+)$/) {
+                ($bus, $addr) = ($1, $2);
+            }
+
+            my @fields = (
+                [ driver               => 'virtio-blk-pci'   ],
+                [ 'iothread-vq-mapping' => $vq_map_ref      ],
+                [ 'queue-size'         => 1024               ],
+                [ 'config-wce'         => JSON::false        ],
+                [ drive                => "drive-$drive_id"  ],
+                [ id                   => $drive_id          ],
+                [ bus                  => $bus               ],
+                [ addr                 => $addr              ],
+                ($drive->{bootindex} ? [ bootindex => $drive->{bootindex} ] : ()),
+            );
+
+            my @parts;
+            for my $fld (@fields) {
+                my ($k, $v) = @$fld;
+                push @parts, $json->encode($k) . ':' . $json->encode($v);
+            }
+            return '{' . join(',', @parts) . '}';
+        }
+        elsif ($use_iothread) {
+            $device = sprintf(
+                'virtio-blk-pci,drive=drive-%s,id=%s%s,iothread=iothread-%s',
+                $drive_id, $drive_id, $pciaddr, $drive_id
+            );
+        }
+        else {
+            $device = sprintf(
+                'virtio-blk-pci,drive=drive-%s,id=%s%s',
+                $drive_id, $drive_id, $pciaddr
+            );
+        }
+
     } elsif ($drive->{interface} eq 'scsi') {
 
         my ($maxdev, $controller, $controller_prefix) = scsihw_infos($conf, $drive);
         my $unit = $drive->{index} % $maxdev;
 
-        my $device_type =
-            PVE::QemuServer::Drive::get_scsi_device_type($drive, $storecfg, $machine_version);
+        my $device_type = PVE::QemuServer::Drive::get_scsi_device_type(
+            $drive, $storecfg, $machine_version);
 
         if (!$conf->{scsihw} || $conf->{scsihw} =~ m/^lsi/ || $conf->{scsihw} eq 'pvscsi') {
             $device = "scsi-$device_type,bus=$controller_prefix$controller.0,scsi-id=$unit";
         } else {
-            $device = "scsi-$device_type,bus=$controller_prefix$controller.0,channel=0,scsi-id=0"
-                . ",lun=$drive->{index}";
+            $device = "scsi-$device_type,bus=$controller_prefix$controller.0,channel=0,"
+                    . "scsi-id=0,lun=$drive->{index}";
         }
-        # for the switch to -blockdev, there is no blockdev for 'none'
+
         if (!min_version($machine_version, 10, 0) || $drive->{file} ne 'none') {
             $device .= ",drive=drive-$drive_id";
         }
@@ -1239,7 +1304,6 @@
         }
         $device .= ",wwn=$drive->{wwn}" if $drive->{wwn};
 
-        # only scsi-hd and scsi-cd support passing vendor and product information
         if ($device_type eq 'hd' || $device_type eq 'cd') {
             if (my $vendor = $drive->{vendor}) {
                 $device .= ",vendor=$vendor";
@@ -1250,21 +1314,20 @@
         }
 
     } elsif ($drive->{interface} eq 'ide' || $drive->{interface} eq 'sata') {
-        my $maxdev = ($drive->{interface} eq 'sata') ? $PVE::QemuServer::Drive::MAX_SATA_DISKS : 2;
+
+        my $maxdev = ($drive->{interface} eq 'sata')
+                   ? $PVE::QemuServer::Drive::MAX_SATA_DISKS : 2;
         my $controller = int($drive->{index} / $maxdev);
-        my $unit = $drive->{index} % $maxdev;
+        my $unit       = $drive->{index} % $maxdev;
 
-        # machine type q35 only supports unit=0 for IDE rather than 2 units. This wasn't handled
-        # correctly before, so e.g. index=2 was mapped to controller=1,unit=0 rather than
-        # controller=2,unit=0. Note that odd indices never worked, as they would be mapped to
-        # unit=1, so to keep backwards compat for migration, it suffices to keep even ones as they
-        # were before. Move odd ones up by 2 where they don't clash.
-        if (PVE::QemuServer::Machine::machine_type_is_q35($conf) && $drive->{interface} eq 'ide') {
+        if (PVE::QemuServer::Machine::machine_type_is_q35($conf)
+            && $drive->{interface} eq 'ide') {
             $controller += 2 * ($unit % 2);
             $unit = 0;
         }
 
-        my $device_type = ($drive->{media} && $drive->{media} eq 'cdrom') ? "cd" : "hd";
+        my $device_type = ($drive->{media} && $drive->{media} eq 'cdrom')
+                        ? "cd" : "hd";
 
         $device = "ide-$device_type";
         if ($drive->{interface} eq 'ide') {
@@ -1272,6 +1335,7 @@
         } else {
             $device .= ",bus=ahci$controller.$unit";
         }
+
         if (!min_version($machine_version, 10, 0) || $drive->{file} ne 'none') {
             $device .= ",drive=drive-$drive_id";
         }
@@ -1287,30 +1351,34 @@
             }
         }
         $device .= ",wwn=$drive->{wwn}" if $drive->{wwn};
+
     } elsif ($drive->{interface} eq 'usb') {
         die "implement me";
-        #  -device ide-drive,bus=ide.1,unit=0,drive=drive-ide0-1-0,id=ide0-1-0
     } else {
         die "unsupported interface type";
     }
 
-    $device .= ",bootindex=$drive->{bootindex}" if $drive->{bootindex};
+    # standard non-JSON options: bootindex, serial, write-cache, rerror, werror
+    $device .= ",bootindex=$drive->{bootindex}" if $drive->{bootindex} && !$use_iothread_vq_mapping;
 
     if (my $serial = $drive->{serial}) {
         $serial = URI::Escape::uri_unescape($serial);
         $device .= ",serial=$serial";
     }
 
-    if (min_version($machine_version, 10, 0)) { # for the switch to -blockdev
-        if (!drive_is_cdrom($drive)) {
-            my $write_cache = 'on';
-            if (my $cache = $drive->{cache}) {
-                $write_cache = 'off' if $cache eq 'writethrough' || $cache eq 'directsync';
+    unless ($use_iothread_vq_mapping) {
+        if (min_version($machine_version, 10, 0)) {
+            if (!drive_is_cdrom($drive)) {
+                my $write_cache = 'on';
+                if (my $cache = $drive->{cache}) {
+                    $write_cache = 'off'
+                        if $cache eq 'writethrough' || $cache eq 'directsync';
+                }
+                $device .= ",write-cache=$write_cache";
+            }
+            for my $o (qw(rerror werror)) {
+                $device .= ",$o=$drive->{$o}" if defined($drive->{$o});
             }
-            $device .= ",write-cache=$write_cache";
-        }
-        for my $o (qw(rerror werror)) {
-            $device .= ",$o=$drive->{$o}" if defined($drive->{$o});
         }
     }
 
@@ -3592,6 +3660,21 @@
                 push @$cmd, '-object', "iothread,id=iothread-$ds" if $drive->{iothread};
             }
 
+	    if ($drive->{interface} eq 'virtio') {
+
+		if ($drive->{iothread_vq_mapping}) {
+
+		    for my $i (0 .. $drive->{iothread_vq_mapping} - 1) {
+			my $id = "iothread,id=iothread-$vmid-$i";
+			push @$cmd, ('-object', $id) unless grep { $_ eq $id } @$cmd;
+		    }
+		} elsif ($drive->{iothread}) {
+
+		my $id = "iothread,id=iothread-$ds";
+		push @$cmd, ('-object', $id) unless grep { $_ eq $id } @$cmd;
+		}
+	    }
+
             if ($drive->{interface} eq 'scsi') {
 
                 my ($maxdev, $controller, $controller_prefix) = scsihw_infos($conf, $drive);
